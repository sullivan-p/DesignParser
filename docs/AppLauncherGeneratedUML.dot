digraph AppLauncher{
rankdir=BT;
DirectoryEvent [
shape = "record",
label = "{DirectoryEvent|- Path file\l- IDirectoryMonitorService service\l- String eventType\l+ String ENTRY_CREATE\l+ String ENTRY_MODIFY\l+ String ENTRY_DELETE\l|+ String getEventType()\l+ IDirectoryMonitorService getSource()\l+ DirectoryEvent(String, Path, IDirectoryMonitorService)\l+ Path getFile()\l}"
];
DirectoryMonitorService [
shape = "record",
label = "{DirectoryMonitorService|- WatchService watcher\l- String TEMP_FILE\l- boolean stop\l- List\<IDirectoryListener\> listeners\l- Path dir\l|+ void stopGracefully()\l+ boolean isRunning()\l void clearEverything()\l void notifyListeners(DirectoryEvent)\l+ Path getDirectory()\l+ void run()\l+ void removeListener(IDirectoryListener)\l+ DirectoryMonitorService(Path)\l+ void addListener(IDirectoryListener)\l}"
];
IApplicationLauncher [
shape = "record",
label = "{\<\<interface\>\>\nIApplicationLauncher|+ Collection\<ProcessRunner\> getRunners()\l+ void addRunner(String, ProcessRunner)\l+ void shutDown()\l}"
];
IDirectoryListener [
shape = "record",
label = "{\<\<interface\>\>\nIDirectoryListener|+ void directoryChanged(DirectoryEvent)\l}"
];
IDirectoryMonitorService [
shape = "record",
label = "{\<\<interface\>\>\nIDirectoryMonitorService|+ void stopGracefully()\l+ boolean isRunning()\l+ Path getDirectory()\l+ void removeListener(IDirectoryListener)\l+ void addListener(IDirectoryListener)\l}"
];
DataFileRunner [
shape = "record",
label = "{DataFileRunner||+ DataFileRunner(String)\l+ void execute(Path)\l}"
];
DirectoryChangeLogger [
shape = "record",
label = "{DirectoryChangeLogger|- Path path\l|+ void directoryChanged(DirectoryEvent)\l+ DirectoryChangeLogger(Path)\l}"
];
AppLauncherApplication [
shape = "record",
label = "{AppLauncherApplication|+ String IN_OUT_DIR\l+ String LOG_FILE\l|+ void main(String[])\l+ AppLauncherApplication()\l}"
];
ExecutableFileRunner [
shape = "record",
label = "{ExecutableFileRunner||+ ExecutableFileRunner(String)\l+ void execute(Path)\l}"
];
ProcessRunner [
shape = "record",
label = "{\<\<abstract\>\>\nProcessRunner|# List\<Process\> processes\l# String command\l|+ String getCommand()\l+ List\<Process\> getProcesses()\l+ ProcessRunner(String)\l+ void execute(Path)\l}"
];
ApplicationLauncher [
shape = "record",
label = "{ApplicationLauncher|- Map\<String, ProcessRunner\> extensionToRunnerMap\l|+ Collection\<ProcessRunner\> getRunners()\l+ void directoryChanged(DirectoryEvent)\l+ void addRunner(String, ProcessRunner)\l+ ApplicationLauncher()\l+ void shutDown()\l}"
];
DirectoryChangeLogger -> IDirectoryListener [arrowhead="onormal", style="dashed"];
DataFileRunner -> ProcessRunner [arrowhead="onormal", style="solid"];
DirectoryMonitorService -> IDirectoryMonitorService [arrowhead="onormal", style="dashed"];
IApplicationLauncher -> IDirectoryListener [arrowhead="onormal", style="solid"];
ApplicationLauncher -> IApplicationLauncher [arrowhead="onormal", style="dashed"];
ExecutableFileRunner -> ProcessRunner [arrowhead="onormal", style="solid"];
DirectoryChangeLogger -> DirectoryEvent [arrowhead="vee", style="dashed"];
ApplicationLauncher -> ProcessRunner [arrowhead="vee", style="solid"];
ApplicationLauncher -> DirectoryEvent [arrowhead="vee", style="dashed"];
IDirectoryMonitorService -> IDirectoryListener [arrowhead="vee", style="dashed"];
DirectoryEvent -> IDirectoryMonitorService [arrowhead="vee", style="solid"];
DirectoryMonitorService -> IDirectoryListener [arrowhead="vee", style="solid"];
IApplicationLauncher -> ProcessRunner [arrowhead="vee", style="dashed"];
DirectoryMonitorService -> DirectoryEvent [arrowhead="vee", style="dashed"];
IDirectoryListener -> DirectoryEvent [arrowhead="vee", style="dashed"];
}