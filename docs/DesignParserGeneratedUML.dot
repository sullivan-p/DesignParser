digraph AbstractPizzaFactory{
rankdir=BT;
DesignParser [
shape = "record",
label = "{DesignParser|- String MODEL_NAME\l- String[] OBJECT_NAMES\l| void \<clinit\>()\l+ DesignParser()\l+ void main(String[])\l}"
];
AsmProcessData [
shape = "record",
label = "{AsmProcessData||- AsmProcessData()\l+ String convertAsmToJavaName(String)\l+ String qualifiedToUnqualifiedName(String)\l+ boolean isInterface(int)\l+ boolean isEnum(int)\l+ boolean isAbstract(int)\l+ AccessLevel getAccessLevel(int)\l+ Set\<String\> getTypeNamesFromDescriptor(String)\l+ String getPrettyTypeNames(String)\l- HashMap\<Character, String\> getSymbolToTypeNameMap()\l}"
];
ClassDeclarationVisitor [
shape = "record",
label = "{ClassDeclarationVisitor|- IDesignModel model\l- ICustomObject currentEntity\l|+ ClassDeclarationVisitor(int, IDesignModel)\l+ IDesignModel getModel()\l+ ICustomObject getCurrentEntity()\l+ void visit(int, int, String, String, String, String[])\l- void handleClassVisit(String, boolean, String, ArrayList\<IInterface\>)\l- void handleInterfaceVisit(String, ArrayList\<IInterface\>)\l- void handleEnumVisit(String, ArrayList\<IInterface\>)\l- ArrayList\<IInterface\> addInterfacesToModel(List\<String\>)\l}"
];
ModelBuilderClassVisitor [
shape = "record",
label = "{\<\<abstract\>\>\nModelBuilderClassVisitor||+ ModelBuilderClassVisitor(int)\l+ ModelBuilderClassVisitor(int, ClassVisitor)\l+ IDesignModel getModel()\l+ ICustomObject getCurrentEntity()\l}"
];
ClassFieldVisitor [
shape = "record",
label = "{ClassFieldVisitor| ModelBuilderClassVisitor decoratedVisitor\l|+ ClassFieldVisitor(int, ModelBuilderClassVisitor)\l+ FieldVisitor visitField(int, String, String, String, Object)\l+ ModelBuilderClassVisitor getDecoratedVisitor()\l- String getFieldSignature(String, AccessLevel, String)\l}"
];
ClassVisitorDecorator [
shape = "record",
label = "{\<\<abstract\>\>\nClassVisitorDecorator||+ ClassVisitorDecorator(int, ClassVisitor)\l+ ModelBuilderClassVisitor getDecoratedVisitor()\l+ IDesignModel getModel()\l+ ICustomObject getCurrentEntity()\l}"
];
ClassMethodVisitor [
shape = "record",
label = "{ClassMethodVisitor| ModelBuilderClassVisitor decoratedVisitor\l|+ ClassMethodVisitor(int, ModelBuilderClassVisitor)\l+ MethodVisitor visitMethod(int, String, String, String, String[])\l+ ModelBuilderClassVisitor getDecoratedVisitor()\l- String getMethodSignature(String, AccessLevel, String)\l}"
];
PrimitiveDataType [
shape = "record",
label = "{\<\<abstract\>\>\nPrimitiveDataType|- String name\l|+ PrimitiveDataType(String)\l+ String getName()\l+ void accept(IModelVisitor)\l}"
];
ArrayModel [
shape = "record",
label = "{ArrayModel|- String name\l|+ ArrayModel()\l+ String getName()\l+ Collection\<IField\> getFields()\l+ Collection\<IMethod\> getMethods()\l+ void accept(IModelVisitor)\l}"
];
ClassModel [
shape = "record",
label = "{ClassModel|- String name\l- Collection\<IField\> fields\l- Collection\<IMethod\> methods\l- IClass extendedClass\l- Collection\<IInterface\> interfaces\l- boolean isConcrete\l|+ ClassModel(String, boolean)\l+ ClassModel(String, List\<IField\>, List\<IMethod\>, IClass, List\<IInterface\>, boolean)\l+ String getName()\l+ Collection\<IField\> getFields()\l+ Collection\<IMethod\> getMethods()\l+ IClass getExtendedClass()\l+ Collection\<IInterface\> getInterfaces()\l+ boolean getIsConcrete()\l+ void setFields(Collection\<IField\>)\l+ void setMethods(Collection\<IMethod\>)\l+ void setExtendedClass(IClass)\l+ void setInterfaces(Collection\<IInterface\>)\l+ void setIsConcrete(boolean)\l+ void accept(IModelVisitor)\l}"
];
DesignModel [
shape = "record",
label = "{DesignModel|- List\<IClass\> classModels\l- List\<IInterface\> interfaceModels\l- List\<IEnum\> enumModels\l- List\<String\> objNamesToModel\l- String DOES_NOT_EXIST_ERROR\l- String ALREADY_EXISTS_ERROR\l|+ DesignModel(String[])\l+ List\<String\> getObjNamesToModel()\l+ boolean hasObject(String)\l+ boolean hasClassModel(String)\l+ boolean hasInterfaceModel(String)\l+ boolean hasEnumModel(String)\l+ IClass getClassModel(String)\l+ IInterface getInterfaceModel(String)\l+ IEnum getEnumModel(String)\l+ IClass addNewClassModel(String, boolean)\l+ IInterface addNewInterfaceModel(String)\l+ IEnum addNewEnumModel(String)\l+ void accept(IModelVisitor)\l- boolean isObjectToModel(IObject)\l}"
];
EmptyModelVisitor [
shape = "record",
label = "{EmptyModelVisitor||+ EmptyModelVisitor()\l+ void previsit(IDesignModel)\l+ void visit(IDesignModel)\l+ void postvisit(IDesignModel)\l+ void previsit(IClass)\l+ void visit(IClass)\l+ void postvisit(IClass)\l+ void previsit(IInterface)\l+ void visit(IInterface)\l+ void postvisit(IInterface)\l+ void previsit(IEnum)\l+ void visit(IEnum)\l+ void postvisit(IEnum)\l+ void previsit(IMethod)\l+ void visit(IMethod)\l+ void postvisit(IMethod)\l+ void previsit(IField)\l+ void visit(IField)\l+ void postvisit(IField)\l}"
];
EnumModel [
shape = "record",
label = "{EnumModel|- String name\l- Collection\<IField\> fields\l- Collection\<IMethod\> methods\l- Collection\<IInterface\> interfaces\l- Collection\<String\> enumElements\l|+ EnumModel(String)\l+ EnumModel(String, List\<IField\>, List\<IMethod\>, List\<IInterface\>, List\<String\>)\l+ String getName()\l+ Collection\<IField\> getFields()\l+ Collection\<IMethod\> getMethods()\l+ Collection\<IInterface\> getInterfaces()\l+ Collection\<String\> getEnumElements()\l+ void setFields(Collection\<IField\>)\l+ void setMethods(Collection\<IMethod\>)\l+ void setInterfaces(Collection\<IInterface\>)\l+ void setEnumElements(Collection\<String\>)\l+ void accept(IModelVisitor)\l}"
];
FieldModel [
shape = "record",
label = "{FieldModel|- AccessLevel accessLevel\l|+ FieldModel(String, String, Collection\<String\>, AccessLevel)\l+ AccessLevel getAccessLevel()\l+ void accept(IModelVisitor)\l}"
];
VariableModel [
shape = "record",
label = "{VariableModel|- String name\l- String signature\l- Collection\<String\> typeNames\l|+ VariableModel(String, String, Collection\<String\>)\l+ String getName()\l+ String getSignature()\l+ Collection\<String\> getTypeNames()\l+ void accept(IModelVisitor)\l}"
];
InterfaceModel [
shape = "record",
label = "{InterfaceModel|- String name\l- Collection\<IField\> fields\l- Collection\<IMethod\> methods\l- Collection\<IInterface\> extendedInterfaces\l|+ InterfaceModel(String)\l+ InterfaceModel(String, Collection\<IField\>, Collection\<IMethod\>, Collection\<IInterface\>)\l+ String getName()\l+ Collection\<IField\> getFields()\l+ Collection\<IMethod\> getMethods()\l+ Collection\<IInterface\> getExtendedInterfaces()\l+ void setFields(Collection\<IField\>)\l+ void setMethods(Collection\<IMethod\>)\l+ void setExtendedInterfaces(Collection\<IInterface\>)\l+ void accept(IModelVisitor)\l}"
];
MethodModel [
shape = "record",
label = "{MethodModel|- String name\l- Collection\<String\> refTypeNames\l- AccessLevel accessLevel\l- String methodSig\l|+ MethodModel(String, Collection\<String\>, AccessLevel, String)\l+ String getName()\l+ AccessLevel getAccessLevel()\l+ Collection\<String\> getReferencedTypeNames()\l+ String getMethodSignature()\l+ void accept(IModelVisitor)\l}"
];
PrimitiveBooleanDataType [
shape = "record",
label = "{PrimitiveBooleanDataType||+ PrimitiveBooleanDataType()\l}"
];
PrimitiveByteDataType [
shape = "record",
label = "{PrimitiveByteDataType||+ PrimitiveByteDataType()\l}"
];
PrimitiveCharDataType [
shape = "record",
label = "{PrimitiveCharDataType||+ PrimitiveCharDataType()\l}"
];
PrimitiveDoubleDataType [
shape = "record",
label = "{PrimitiveDoubleDataType||+ PrimitiveDoubleDataType()\l}"
];
PrimitiveFloatDataType [
shape = "record",
label = "{PrimitiveFloatDataType||+ PrimitiveFloatDataType()\l}"
];
PrimitiveIntDataType [
shape = "record",
label = "{PrimitiveIntDataType||+ PrimitiveIntDataType()\l}"
];
PrimitiveLongDataType [
shape = "record",
label = "{PrimitiveLongDataType||+ PrimitiveLongDataType()\l}"
];
PrimitiveShortDataType [
shape = "record",
label = "{PrimitiveShortDataType||+ PrimitiveShortDataType()\l}"
];
UmlModelVisitor [
shape = "record",
label = "{\<\<abstract\>\>\nUmlModelVisitor||+ UmlModelVisitor()\l+ String getUmlMarkup()\l}"
];
UmlAssociationVisitor [
shape = "record",
label = "{UmlAssociationVisitor|- StringBuilder sb\l- Collection\<String\> objNamesToModel\l|+ UmlAssociationVisitor(Collection\<String\>)\l+ String getUmlMarkup()\l+ void visit(IClass)\l+ void visit(IInterface)\l+ void visit(IEnum)\l- void appendObjAssociatesArrows(IObject)\l- void appendObjUsesArrows(IObject)\l}"
];
UmlGenerator [
shape = "record",
label = "{UmlGenerator|- String modelName\l- IDesignModel model\l- StringBuilder stringBuilder\l- List\<UmlModelVisitor\> visitorList\l|+ UmlGenerator(String, IDesignModel, String[])\l+ String getUmlMarkup()\l}"
];
UmlInheritanceVisitor [
shape = "record",
label = "{UmlInheritanceVisitor|- StringBuilder sb\l- Collection\<String\> objNamesToModel\l|+ UmlInheritanceVisitor(Collection\<String\>)\l+ String getUmlMarkup()\l+ void previsit(IClass)\l+ void previsit(IInterface)\l+ void previsit(IEnum)\l}"
];
UmlObjVisitor [
shape = "record",
label = "{UmlObjVisitor|- StringBuilder sb\l|+ UmlObjVisitor()\l+ String getUmlMarkup()\l+ void previsit(IClass)\l+ void previsit(IInterface)\l+ void previsit(IEnum)\l+ void visit(IClass)\l+ void visit(IMethod)\l+ void visit(IField)\l+ void postvisit(IClass)\l+ void postvisit(IInterface)\l+ void postvisit(IEnum)\l- void appendObjPrevisitStr(StringBuilder, IObject, String)\l- void appendObjPostvisitStr(StringBuilder)\l}"
];
UmlArrowMarkup [
shape = "record",
label = "{UmlArrowMarkup|- String OPEN_ARROWHEAD\l- String V_ARROWHEAD\l- String SOLID_LINE\l- String DASHED_LINE\l|- UmlArrowMarkup()\l+ String getExtendsArrow(String, String)\l+ String getImplementsArrow(String, String)\l+ String getReferencesArrow(String, String)\l+ String getAssociatesArrow(String, String)\l- String getArrow(String, String, String, String)\l}"
];
UmlProcessString [
shape = "record",
label = "{UmlProcessString||- UmlProcessString()\l+ String escapeAngleBraces(String)\l}"
];
ICustomObject [
shape = "record",
label = "{\<\<interface\>\>\nICustomObject|+ void setFields(Collection\<IField\>)\l+ void setMethods(Collection\<IMethod\>)\l}"
];
IClass [
shape = "record",
label = "{\<\<interface\>\>\nIClass|+ IClass getExtendedClass()\l+ Collection\<IInterface\> getInterfaces()\l+ boolean getIsConcrete()\l+ void setExtendedClass(IClass)\l+ void setInterfaces(Collection\<IInterface\>)\l+ void setIsConcrete(boolean)\l}"
];
IObject [
shape = "record",
label = "{\<\<interface\>\>\nIObject|+ Collection\<IField\> getFields()\l+ Collection\<IMethod\> getMethods()\l}"
];
IModelComponent [
shape = "record",
label = "{\<\<interface\>\>\nIModelComponent|+ String getName()\l}"
];
IDataType [
shape = "record",
label = "{\<\<interface\>\>\nIDataType|}"
];
ITraversable [
shape = "record",
label = "{\<\<interface\>\>\nITraversable|+ void accept(IModelVisitor)\l}"
];
IDesignModel [
shape = "record",
label = "{\<\<interface\>\>\nIDesignModel|+ List\<String\> getObjNamesToModel()\l+ boolean hasObject(String)\l+ boolean hasClassModel(String)\l+ boolean hasInterfaceModel(String)\l+ boolean hasEnumModel(String)\l+ IClass getClassModel(String)\l+ IInterface getInterfaceModel(String)\l+ IEnum getEnumModel(String)\l+ IClass addNewClassModel(String, boolean)\l+ IInterface addNewInterfaceModel(String)\l+ IEnum addNewEnumModel(String)\l}"
];
IEnum [
shape = "record",
label = "{\<\<interface\>\>\nIEnum|+ Collection\<IInterface\> getInterfaces()\l+ Collection\<String\> getEnumElements()\l+ void setInterfaces(Collection\<IInterface\>)\l+ void setEnumElements(Collection\<String\>)\l}"
];
IVariable [
shape = "record",
label = "{\<\<interface\>\>\nIVariable|+ String getSignature()\l+ Collection\<String\> getTypeNames()\l}"
];
IField [
shape = "record",
label = "{\<\<interface\>\>\nIField|+ AccessLevel getAccessLevel()\l}"
];
IInterface [
shape = "record",
label = "{\<\<interface\>\>\nIInterface|+ Collection\<IInterface\> getExtendedInterfaces()\l+ void setExtendedInterfaces(Collection\<IInterface\>)\l}"
];
IMethod [
shape = "record",
label = "{\<\<interface\>\>\nIMethod|+ AccessLevel getAccessLevel()\l+ Collection\<String\> getReferencedTypeNames()\l+ String getMethodSignature()\l}"
];
IModelVisitor [
shape = "record",
label = "{\<\<interface\>\>\nIModelVisitor|+ void previsit(IDesignModel)\l+ void visit(IDesignModel)\l+ void postvisit(IDesignModel)\l+ void previsit(IClass)\l+ void visit(IClass)\l+ void postvisit(IClass)\l+ void previsit(IInterface)\l+ void visit(IInterface)\l+ void postvisit(IInterface)\l+ void previsit(IEnum)\l+ void visit(IEnum)\l+ void postvisit(IEnum)\l+ void previsit(IMethod)\l+ void visit(IMethod)\l+ void postvisit(IMethod)\l+ void previsit(IField)\l+ void visit(IField)\l+ void postvisit(IField)\l}"
];
IUmlGenerator [
shape = "record",
label = "{\<\<interface\>\>\nIUmlGenerator|+ String getUmlMarkup()\l}"
];
AccessLevel [
shape = "record",
label = "{\<\<enum\>\>\nAccessLevel|+ AccessLevel Public\l+ AccessLevel Private\l+ AccessLevel Protected\l+ AccessLevel Default\l- int[] $SWITCH_TABLE$designParser$model$impl$AccessLevel\l- AccessLevel[] ENUM$VALUES\l void \<clinit\>()\l- AccessLevel(String, int)\l+ String toString()\l+ String toUmlString()\l+ AccessLevel[] values()\l+ AccessLevel valueOf(String)\l int[] $SWITCH_TABLE$designParser$model$impl$AccessLevel()\l}"
];
ClassDeclarationVisitor -> ModelBuilderClassVisitor [arrowhead="onormal", style="solid"];
ClassFieldVisitor -> ClassVisitorDecorator [arrowhead="onormal", style="solid"];
ClassVisitorDecorator -> ModelBuilderClassVisitor [arrowhead="onormal", style="solid"];
ClassMethodVisitor -> ClassVisitorDecorator [arrowhead="onormal", style="solid"];
PrimitiveDataType -> IDataType [arrowhead="onormal", style="dashed"];
ArrayModel -> IObject [arrowhead="onormal", style="dashed"];
ClassModel -> IClass [arrowhead="onormal", style="dashed"];
DesignModel -> IDesignModel [arrowhead="onormal", style="dashed"];
EmptyModelVisitor -> IModelVisitor [arrowhead="onormal", style="dashed"];
EnumModel -> IEnum [arrowhead="onormal", style="dashed"];
FieldModel -> VariableModel [arrowhead="onormal", style="solid"];
FieldModel -> IField [arrowhead="onormal", style="dashed"];
VariableModel -> IVariable [arrowhead="onormal", style="dashed"];
InterfaceModel -> IInterface [arrowhead="onormal", style="dashed"];
MethodModel -> IMethod [arrowhead="onormal", style="dashed"];
PrimitiveBooleanDataType -> PrimitiveDataType [arrowhead="onormal", style="solid"];
PrimitiveByteDataType -> PrimitiveDataType [arrowhead="onormal", style="solid"];
PrimitiveCharDataType -> PrimitiveDataType [arrowhead="onormal", style="solid"];
PrimitiveDoubleDataType -> PrimitiveDataType [arrowhead="onormal", style="solid"];
PrimitiveFloatDataType -> PrimitiveDataType [arrowhead="onormal", style="solid"];
PrimitiveIntDataType -> PrimitiveDataType [arrowhead="onormal", style="solid"];
PrimitiveLongDataType -> PrimitiveDataType [arrowhead="onormal", style="solid"];
PrimitiveShortDataType -> PrimitiveDataType [arrowhead="onormal", style="solid"];
UmlModelVisitor -> EmptyModelVisitor [arrowhead="onormal", style="solid"];
UmlAssociationVisitor -> UmlModelVisitor [arrowhead="onormal", style="solid"];
UmlGenerator -> IUmlGenerator [arrowhead="onormal", style="dashed"];
UmlInheritanceVisitor -> UmlModelVisitor [arrowhead="onormal", style="solid"];
UmlObjVisitor -> UmlModelVisitor [arrowhead="onormal", style="solid"];
ICustomObject -> IObject [arrowhead="onormal", style="solid"];
IClass -> ICustomObject [arrowhead="onormal", style="solid"];
IObject -> IDataType [arrowhead="onormal", style="solid"];
IModelComponent -> ITraversable [arrowhead="onormal", style="solid"];
IDataType -> IModelComponent [arrowhead="onormal", style="solid"];
IDesignModel -> ITraversable [arrowhead="onormal", style="solid"];
IEnum -> ICustomObject [arrowhead="onormal", style="solid"];
IVariable -> IModelComponent [arrowhead="onormal", style="solid"];
IField -> IVariable [arrowhead="onormal", style="solid"];
IInterface -> ICustomObject [arrowhead="onormal", style="solid"];
IMethod -> IModelComponent [arrowhead="onormal", style="solid"];
AsmProcessData -> AccessLevel [arrowhead="vee", style="dashed"];
ClassDeclarationVisitor -> IDesignModel [arrowhead="vee", style="solid"];
ClassDeclarationVisitor -> ICustomObject [arrowhead="vee", style="solid"];
ClassDeclarationVisitor -> IDesignModel [arrowhead="vee", style="dashed"];
ClassDeclarationVisitor -> IInterface [arrowhead="vee", style="dashed"];
ClassDeclarationVisitor -> ICustomObject [arrowhead="vee", style="dashed"];
ModelBuilderClassVisitor -> IDesignModel [arrowhead="vee", style="dashed"];
ModelBuilderClassVisitor -> ICustomObject [arrowhead="vee", style="dashed"];
ClassFieldVisitor -> ModelBuilderClassVisitor [arrowhead="vee", style="solid"];
ClassFieldVisitor -> ModelBuilderClassVisitor [arrowhead="vee", style="dashed"];
ClassFieldVisitor -> AccessLevel [arrowhead="vee", style="dashed"];
ClassVisitorDecorator -> IDesignModel [arrowhead="vee", style="dashed"];
ClassVisitorDecorator -> ModelBuilderClassVisitor [arrowhead="vee", style="dashed"];
ClassVisitorDecorator -> ICustomObject [arrowhead="vee", style="dashed"];
ClassMethodVisitor -> ModelBuilderClassVisitor [arrowhead="vee", style="solid"];
ClassMethodVisitor -> ModelBuilderClassVisitor [arrowhead="vee", style="dashed"];
ClassMethodVisitor -> AccessLevel [arrowhead="vee", style="dashed"];
PrimitiveDataType -> IModelVisitor [arrowhead="vee", style="dashed"];
ArrayModel -> IModelVisitor [arrowhead="vee", style="dashed"];
ArrayModel -> IMethod [arrowhead="vee", style="dashed"];
ArrayModel -> IField [arrowhead="vee", style="dashed"];
ClassModel -> IInterface [arrowhead="vee", style="solid"];
ClassModel -> IMethod [arrowhead="vee", style="solid"];
ClassModel -> IClass [arrowhead="vee", style="solid"];
ClassModel -> IField [arrowhead="vee", style="solid"];
ClassModel -> IModelVisitor [arrowhead="vee", style="dashed"];
ClassModel -> IInterface [arrowhead="vee", style="dashed"];
ClassModel -> IMethod [arrowhead="vee", style="dashed"];
ClassModel -> IClass [arrowhead="vee", style="dashed"];
ClassModel -> IField [arrowhead="vee", style="dashed"];
DesignModel -> IInterface [arrowhead="vee", style="solid"];
DesignModel -> IClass [arrowhead="vee", style="solid"];
DesignModel -> IEnum [arrowhead="vee", style="solid"];
DesignModel -> IModelVisitor [arrowhead="vee", style="dashed"];
DesignModel -> IObject [arrowhead="vee", style="dashed"];
DesignModel -> IInterface [arrowhead="vee", style="dashed"];
DesignModel -> IClass [arrowhead="vee", style="dashed"];
DesignModel -> IEnum [arrowhead="vee", style="dashed"];
EmptyModelVisitor -> IDesignModel [arrowhead="vee", style="dashed"];
EmptyModelVisitor -> IInterface [arrowhead="vee", style="dashed"];
EmptyModelVisitor -> IClass [arrowhead="vee", style="dashed"];
EmptyModelVisitor -> IMethod [arrowhead="vee", style="dashed"];
EmptyModelVisitor -> IField [arrowhead="vee", style="dashed"];
EmptyModelVisitor -> IEnum [arrowhead="vee", style="dashed"];
EnumModel -> IInterface [arrowhead="vee", style="solid"];
EnumModel -> IMethod [arrowhead="vee", style="solid"];
EnumModel -> IField [arrowhead="vee", style="solid"];
EnumModel -> IModelVisitor [arrowhead="vee", style="dashed"];
EnumModel -> IInterface [arrowhead="vee", style="dashed"];
EnumModel -> IMethod [arrowhead="vee", style="dashed"];
EnumModel -> IField [arrowhead="vee", style="dashed"];
FieldModel -> AccessLevel [arrowhead="vee", style="solid"];
FieldModel -> IModelVisitor [arrowhead="vee", style="dashed"];
FieldModel -> AccessLevel [arrowhead="vee", style="dashed"];
VariableModel -> IModelVisitor [arrowhead="vee", style="dashed"];
InterfaceModel -> IInterface [arrowhead="vee", style="solid"];
InterfaceModel -> IMethod [arrowhead="vee", style="solid"];
InterfaceModel -> IField [arrowhead="vee", style="solid"];
InterfaceModel -> IModelVisitor [arrowhead="vee", style="dashed"];
InterfaceModel -> IInterface [arrowhead="vee", style="dashed"];
InterfaceModel -> IMethod [arrowhead="vee", style="dashed"];
InterfaceModel -> IField [arrowhead="vee", style="dashed"];
MethodModel -> AccessLevel [arrowhead="vee", style="solid"];
MethodModel -> IModelVisitor [arrowhead="vee", style="dashed"];
MethodModel -> AccessLevel [arrowhead="vee", style="dashed"];
UmlAssociationVisitor -> IObject [arrowhead="vee", style="dashed"];
UmlAssociationVisitor -> IInterface [arrowhead="vee", style="dashed"];
UmlAssociationVisitor -> IClass [arrowhead="vee", style="dashed"];
UmlAssociationVisitor -> IEnum [arrowhead="vee", style="dashed"];
UmlGenerator -> IDesignModel [arrowhead="vee", style="solid"];
UmlGenerator -> UmlModelVisitor [arrowhead="vee", style="solid"];
UmlGenerator -> IDesignModel [arrowhead="vee", style="dashed"];
UmlInheritanceVisitor -> IInterface [arrowhead="vee", style="dashed"];
UmlInheritanceVisitor -> IClass [arrowhead="vee", style="dashed"];
UmlInheritanceVisitor -> IEnum [arrowhead="vee", style="dashed"];
UmlObjVisitor -> IObject [arrowhead="vee", style="dashed"];
UmlObjVisitor -> IInterface [arrowhead="vee", style="dashed"];
UmlObjVisitor -> IClass [arrowhead="vee", style="dashed"];
UmlObjVisitor -> IMethod [arrowhead="vee", style="dashed"];
UmlObjVisitor -> IField [arrowhead="vee", style="dashed"];
UmlObjVisitor -> IEnum [arrowhead="vee", style="dashed"];
ICustomObject -> IMethod [arrowhead="vee", style="dashed"];
ICustomObject -> IField [arrowhead="vee", style="dashed"];
IClass -> IInterface [arrowhead="vee", style="dashed"];
IClass -> IClass [arrowhead="vee", style="dashed"];
IObject -> IMethod [arrowhead="vee", style="dashed"];
IObject -> IField [arrowhead="vee", style="dashed"];
ITraversable -> IModelVisitor [arrowhead="vee", style="dashed"];
IDesignModel -> IInterface [arrowhead="vee", style="dashed"];
IDesignModel -> IClass [arrowhead="vee", style="dashed"];
IDesignModel -> IEnum [arrowhead="vee", style="dashed"];
IEnum -> IInterface [arrowhead="vee", style="dashed"];
IField -> AccessLevel [arrowhead="vee", style="dashed"];
IInterface -> IInterface [arrowhead="vee", style="dashed"];
IMethod -> AccessLevel [arrowhead="vee", style="dashed"];
IModelVisitor -> IDesignModel [arrowhead="vee", style="dashed"];
IModelVisitor -> IInterface [arrowhead="vee", style="dashed"];
IModelVisitor -> IClass [arrowhead="vee", style="dashed"];
IModelVisitor -> IMethod [arrowhead="vee", style="dashed"];
IModelVisitor -> IField [arrowhead="vee", style="dashed"];
IModelVisitor -> IEnum [arrowhead="vee", style="dashed"];
AccessLevel -> AccessLevel [arrowhead="vee", style="solid"];
AccessLevel -> AccessLevel [arrowhead="vee", style="dashed"];
}